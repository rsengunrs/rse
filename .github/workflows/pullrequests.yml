name: Pull Request

on: pull_request

env:
  node-version: 16.14
jobs:
  check:
    name: "Checks"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
          cache: "pnpm"

      - name: ESlint and Typescript caching
        uses: actions/cache@v3
        id: eslint-cache
        with:
          path: |
            .eslintcache
            tsconfig.tsbuildinfo
          key: ${{ runner.os }}-eslint-tsbuildinfo-${{ hashFiles('**/*.ts','**/*.js', 'package.json', 'tsconfig.json') }}

      - name: Install workerd Dependencies
        if: ${{ runner.os == 'Linux' }}
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y libc++1

      - name: Install NPM Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      - name: Check for errors
        run: pnpm run check
        env:
          NODE_OPTIONS: "--max_old_space_size=8192"

  test:
    name: "Tests"
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
          cache: "pnpm"

      - name: Install workerd Dependencies
        if: ${{ runner.os == 'Linux' }}
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y libc++1

      - name: Install NPM Dependencies
        run: pnpm install --frozen-lockfile

      - name: Run builds
        run: pnpm run build
        env:
          NODE_ENV: "production"

      - name: Run tests & collect coverage
        run: pnpm run test:ci
        env:
          TMP_CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TMP_CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          NODE_OPTIONS: "--max_old_space_size=8192"

      - name: Report Code Coverage
        uses: codecov/codecov-action@v3
