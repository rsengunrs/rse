name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    if: ${{ github.repository_owner == 'cloudflare' }}
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node.js 16.14
        uses: actions/setup-node@v3
        with:
          node-version: 16.14
          cache: "pnpm"

      - name: Install workerd Dependencies
        if: ${{ runner.os == 'Linux' }}
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y libc++1

      - name: Install NPM Dependencies
        run: pnpm install --frozen-lockfile

      - name: Check the build
        run: pnpm run build

      - name: Check for other errors
        run: pnpm run check
        env:
          NODE_OPTIONS: "--max_old_space_size=8192"

      - name: Create Version PR or Publish to NPM
        id: changesets
        uses: changesets/action@v1
        with:
          version: node .github/changeset-version.js
          publish: pnpm exec changeset publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_PUBLISH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
          ALGOLIA_APP_ID: ${{ secrets.ALGOLIA_APP_ID }}
          ALGOLIA_PUBLIC_KEY: ${{ secrets.ALGOLIA_PUBLIC_KEY }}
          NODE_ENV: "production"
          # This is the "production" key for sparrow analytics.
          # Include this here because this step will rebuild Wrangler and needs to have this available
          SPARROW_SOURCE_KEY: "50598e014ed44c739ec8074fdc16057c"

      - name: Get create-cloudflare tag
        id: create-cloudflare-latest-tag
        uses: actions/github-script@v6
        with:
        script: |
          const publishedPackages = ${{ steps.changesets.outputs.publishedPackages }};
          console.log(publishedPackages);

          for (let package of publishedPackages) {
            if (package.name === "create-cloudflare") {
              const versionStr = package.version;
              const version = versionStr.split(".");
              const tag = `v${version[0]}-latest`;
              const packageVersion = `create-cloudflare@${versionStr}`;
              return {tag: tag, version: packageVersion};
            }
          }

          return null;

      - name: Publish create-cloudflare latest tag
        if: ${{ steps.create-cloudflare-latest-tag.outputs != null }}
        run: pnpm dist-tag add ${{ steps.create-cloudflare-latest-tag.outputs.packageVersion }} ${{ steps.create-cloudflare-latest-tag.outputs.tag }}
